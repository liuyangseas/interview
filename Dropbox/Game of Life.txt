import java.io.*;
import java.util.*;

/*
 * To execute Java, please define "static void main" on a class
 * named Solution.
 *
 * If you need more classes, simply define them inline.
 */

class Solution {
  int[][] dirs = {{1,1},{1,0},{1,-1},{0,1},{0,-1},{-1,-1},{-1,0},{-1,1}};
  public static void main(String[] args) {
    ArrayList<String> strings = new ArrayList<String>();
    strings.add("Hello, World!");
    strings.add("Welcome to CoderPad.");
    strings.add("This pad is running Java 8.");

    for (String string : strings) {
      System.out.println(string);
    }
  }
  
  // APIs 1: loadData(Stream source, int len) -> output should be len size of cols of input 
  // 2: break the input and output to the disk/ storage systems
  //   outPutData(int[][] input, int len) -> output first len cols to Disk or Storage Systems
  /*
     public static int[][] loadData(String path, Configuration config){
        // check for our path whether is valid
        
        // get data from path
        String key = Helper.DeserilizePath(path);
        
        // fetch the data from Disk
        Stream output = fetchdData(key, config);
        
        // convert from Stream to our output
        int[][] res = Helper.Convert(output);
        
        
        return res;
     }
     
     public static boolean outputData(String path, int[][] input, Configuration outConfig){
          // if true which emans our mission success
          // if false which means our task failed, we can output out exception
          
          // check for path valid or input data is valid or outConfig is valid
          
          int[][] temp = Helper.ConvertToOutput(input, outConfig);
          
          if(temp != null){
             
          
          }
     
     
     }
     
     // readFromFile(filename, read Firest col);
     public static int[][] ferchdData(String key, Configuration config){
          Stream input;
          
          List<List<Integer>> res = new List<ArrayList<>>();
          
          while(stream.hasNext()){
             List<Integer> temp = new ArrayList<>();
             
             temp.addAll(readFromFile(fileName, read First col);
          
             res.add(temp);
             
              int[][] output = convert(res);
              
            gameOfLife(output);
            
            outputResult;
          }
          
          
         
          
          
          return output;
          
          
          
     
     
     }
  
  */
  
  // filename: string -> this file would contain your board
  public static void gameOfLife(int[][] input){
    if(input == null || input.length == 0){
      return;
    }
    
    int row = input.length;
    int col = input[0].length;
    
    // loop through our input
    for(int i = 0; i < row; i++){
      for(int j = 0; j < col; j++){
          // find how many live neighbors
          int num = getLiveNeighbors(input, i, j);
        if(input[i][j] == 1 && (num < 2 || num > 3)){
          input[i][j] = 2;
        }
        
        if(input[i][j] == 0 && num == 3){
          input[i][j] = 3;
        }
      }
    }
    
    for(int i = 0; i < row; i++){
      for(int j = 0; j < col; j++){
        if(input[i][j] % 2 == 0){
          input[i][j] = 0;
        }else{
          input[i][j] = 1;
        }
      }
    }   
  }
  
  public static int getLiveNeighbors(int[][] input, int i, int j){
    int res = 0;
    
    for(int[] dir : dirs){
       // corner case -> first row/ last row/ first col / last col
if(i + dir[0] < 0 || i + dir[0] >= input.length || j + dir[1] < 0 || j + dir[1] > input[0].length)      {
        continue;
      }
      
      if(input[dir[0] + i][dir[1] + j] == 1 || input[dir[0] + i][dir[1] + j] == 3){
        res++;
      }
    }
    
    return res;
}


/* 
Your previous Plain Text content is preserved below:

Hello Mingyang.

Paper


- If the cell is alive: if it has 2 or 3 alive neighbors, it stays alive. Otherwise, it dies.
- If the cell is dead: if it has exactly 3 alive neighbors, it becomes alive. Otherwise, it stays dead.


|1| | |    | | | |    | | | |
| |1| | -> |1|1| | -> | | | |
|1| | |    | | | |    | | | |

// 1. loop through the board and find lives for each node
// 2. store the next status
1: alive   ->   alive 1
0: dead    ->   dead  0
1: alive   ->   dead  2 
0: dead    ->   alive 3

board is too huge not in the memory?  get the file name

divide data into chunks Distrubuted system  
divide probme into subproblems  -> single machine  mions || 

neighbors only has 3 cols or 3 rows
output the first two cols
everytime we load two more cols compute and output the first two cols
 */