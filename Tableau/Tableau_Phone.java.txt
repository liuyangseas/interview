-1 = unchecked
0 = mixed
1 = checked

https://www.youtube.com/watch?v=8gNF8_9zhYE

class TreeNode{
    int val;
    List<TreeNode> children;
    TreeNode parent;
    TreeNode(int x){
        val = x;
    }
    
    TreeNode(int x, List<TreeNode> y){
        val = x;
        children = y;
    }
}


 1
 1

newValue = -1

public void updateNode(TreeNode node, int newValue)
{
   if(node == null || node.val == newValue){
       return;
   }
   
  //take care of parent
   TreeNode parentNode = node.parent;
   
   while(parentNode != null){
       if(newValue == -1 && parentNode.val == 1){
           if(parentNode.children.size() == 1){
               parentNode.val = -1;
           }else{
               parentNode.val = 0;
           }
       }else if(newValue == 1 && parentNode.val == -1){
            if(parentNode.children.size() == 1){
               parentNode.val = 1;
           }else{
               parentNode.val = 0;
           }
       }else if(newValue == -1 && parentNode.val == 0){
           // 1. node is the only subtree has val = 1. root is 0 should return -1
           // check
                 0
             -1  -1  -1  1
           if(!checkMonoParent(parentNode, -1){
               parentNode.val = 0;
           }else{
               parentNode.val = -1;
           }
       }else if(newValue == 1 && parentNode.val == 0){
           // 1. node is the only subtree has val = -1. root is 0 should return 1;
            if(!checkMonoParent(parentNode, 1){
               parentNode.val = 0;
           }else{
               parentNode.val = 1;
           }
       }
       
       parentNode = parentNode.parent;
   }
   
   // take care of children
   updateHelper(node,newValue);
}

// improvement: 
public boolean checkMonoParent(TreeNode node, int val){
    if(node == null || node.children.size() == 0){
        return false;
    }
    
    int count = 0;
    for(TreeNode children : node.children){
        if(children.val == val){
            count++;
        }
    }
    
    return count == node.children.size()-1;
}

public int updateHelper(TreeNode node, int val){
     // cornor case
    if(node == null){
        return;
    }
    
    node.val = val;
    Queue<TreeNode> queue = new LinkedList<>();
    queue.offer(node);
    
    while(!queue.isEmpty()){
        TreeNode temp = queue.poll();
        
        List<TreeNode> children = temp.children;
        
        // null 
        if(children == null || children.size() == 0){
            break;
        }
        
        // for(int i = 0; i <)
        for(TreeNode child : children){
            child.val = val;
            queue.offer(child);
        }
    }
    
    return val;
}